default: &defaults
  docker:
    - image: gcr.io/bench-projects/bench-projects/circlebuildenv:v6
      auth:
        username: _json_key
        password: "${SERVICE_ACCOUNT_JSON_KEY}"

  working_directory: ~/repo

  environment:
    # Customize the JVM maximum heap limit
    JVM_OPTS: -Xmx3200m
    TERM: dumb

version: 2
jobs:
  test:
    <<: *defaults
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # Running unit tests
      - run:
          name: Running unit tests on source code
          command: |
            ./gradlew build jacocoTestReport assembleAndroidTest
            ls -a app/build/outputs/logs

      # Storing unit test reports
      - store_artifacts:
          path: ~/repo/app/build/reports/jacoco
          destination: reports
      - store_artifacts:
          path: ~/repo/app/build/reports/tests
          destination: reports

  instrumented_test:
    <<: *defaults
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      # Build apk with instrumented tests
      - run:
          name: Creating an apk file with instrumented tests
          command: |
            ./gradlew build :app:assembleDebug :app:assembleAndroidTest -PdisablePreDex
      # Set project ID and use the service account
      - run:
          name: Set gcloud project ID and authenticate service account
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud config set project $GCP_PROJECT_ID

      # Send test apk to firebase
      - run:
          name: Run instrumented tests on firebase
          command: |
            gcloud beta firebase test android run \
            --type instrumentation \
            --app app/build/outputs/apk/mock/debug/app-mock-debug.apk \
            --test app/build/outputs/apk/androidTest/mock/debug/app-mock-debug-androidTest.apk \
            --directories-to-pull=/sdcard/tmp \
            --timeout 20m \
            --results-bucket art-firebase-test-results
      # Get test reports from the storage bucket
      - run:
          name: Download test reports from storage bucket
          when: always
          command: |
            REPORTS_DIR=$(gsutil ls gs://art-firebase-test-results | tail -1)
            mkdir ~/reports
            gsutil cp -r $REPORTS_DIR ~/reports
      # Storing instrumented test reports
      - store_artifacts:
          path: ~/reports
          destination: reports

      # Sending notification
      - run:
          name: Notifying slack channel on succeed
          when: on_success
          command: |
            bash .circleci/notify_slack.sh
      - run:
          name: Notifying slack channel on fail
          when: on_fail
          command: |
            bash .circleci/notify_slack_fail.sh

  deploy_test_build:
    <<: *defaults
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # Building apk files for debug and release
      - run:
          name: Assembling apk
          command: |
            ./gradlew :app:assemble

      # Storing the generated apk files and reports
      - store_artifacts:
          path: ~/repo/app/build/outputs/apk/prod/debug
      - store_artifacts:
          path: ~/repo/app/build/outputs/apk/prod/release
      - store_artifacts:
          path: ~/repo/app/build/reports
          destination: reports

      # Sending notification
      - run:
          name: Notifying slack channel on succeed
          when: on_success
          command: |
            bash ~/repo/.circleci/notify_slack.sh
      - run:
          name: Notifying slack channel on fail
          when: on_fail
          command: |
            bash ~/repo/.circleci/notify_slack_fail.sh

  deploy_staging_build:
    <<: *defaults
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # Building apk files for debug and release
      - run:
          name: Assembling apk
          command: |
            ./gradlew :app:assemble

      # Storing the generated apk files and reports
      - store_artifacts:
          path: ~/repo/app/build/outputs/apk/prod/debug
      - store_artifacts:
          path: ~/repo/app/build/outputs/apk/prod/release
      - store_artifacts:
          path: ~/repo/app/build/reports
          destination: reports

      # Sending notification
      - run:
          name: Notifying slack channel on succeed
          when: on_success
          command: |
            bash ~/repo/.circleci/notify_slack.sh
      - run:
          name: Notifying slack channel on fail
          when: on_fail
          command: |
            bash ~/repo/.circleci/notify_slack_fail.sh

  deploy_production_build:
    <<: *defaults
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # Building apk files for debug and release
      - run:
          name: Assembling apk
          command: |
            ./gradlew :app:assembleRelease

      # Storing the generated apk files and reports
      - store_artifacts:
          path: ~/repo/app/build/outputs/apk/prod/debug
      - store_artifacts:
          path: ~/repo/app/build/outputs/apk/prod/release
      - store_artifacts:
          path: ~/repo/app/build/reports
          destination: reports

      # Sending notification
      - run:
          name: Notifying slack channel on succeed
          when: on_success
          command: |
            bash ~/repo/.circleci/notify_slack.sh
      - run:
          name: Notifying slack channel on fail
          when: on_fail
          command: |
            bash ~/repo/.circleci/notify_slack_fail.sh

workflows:
  version: 2
  lint_test_and_deployment:
    jobs:
      - test
      - instrumented_test:
          requires:
            - test
          filters:
                branches:
                    only:
                        - master
                        - staging
                        - develop
      - deploy_test_build:
          requires:
            - test
          filters:
            branches:
              only: develop
      - deploy_staging_build:
          requires:
            - test
          filters:
            branches:
              only: staging
      - deploy_production_build:
          requires:
            - test
          filters:
            branches:
              only: master
